#!/usr/bin/env ruby
require_relative '../lib/tp_plus'
require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: tpp [options] filename"

  opts.on("-e", "--environment <file>", "Require an environment file <file> before parsing") do |e|
    options[:environment] = e
  end

  opts.on("-o", "--output <file>", "Write output to <file>") do |o|
    options[:output] = o
    options[:output_folder] = File.dirname(o)
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

if ARGV.length != 1
  puts "Must provide filename argument. See tpp --help for details"
  exit
end

tpp_filename = File.basename(ARGV[0],".*")

if options[:output]
  # ensure filename matches (FANUC parser will complain otherwise)
  output_filename = File.basename(options[:output], ".*")
  if output_filename != tpp_filename
    puts "Output filename <#{output_filename}> does not match input filename <#{tpp_filename}>"
    exit
  end
end

def contents(filename)
  if !File.exist?(filename)
    puts "File <#{filename}> does not exist"
    exit
  end
  f = File.open(filename,'rb')
  src = f.read
  f.close
  return src
end

scanner = TPPlus::Scanner.new
parser = TPPlus::Parser.new(scanner)
interpreter = parser.interpreter
if options[:environment]
  interpreter.load_environment(contents(options[:environment]))
end

src = contents(ARGV[0])

scanner.scan_setup(src)
parser.parse

lines = interpreter.eval

#list warning messages
lines += interpreter.list_warnings

output = %(/PROG #{tpp_filename.upcase}
/ATTR
COMMENT = "#{interpreter.header_data[:comment] || tpp_filename.upcase}";
TCD:  STACK_SIZE	= 0,
      TASK_PRIORITY	= 50,
      TIME_SLICE	= 0,
      BUSY_LAMP_OFF	= 0,
      ABORT_REQUEST	= 0,
      PAUSE_REQUEST	= #{interpreter.header_data[:ignore_pause] ? "7" : "0"};
DEFAULT_GROUP = #{interpreter.header_data[:group_mask] || "1,*,*,*,*"};\n)

#add tool application data
output += "/APPL\n"
interpreter.header_appl_data.each do |n|
  output += n.write(interpreter)
end


output += "/MN\n"

#put guard in to not output the file if there are no instructions
line_count = 0
lines.each_line do |line|
  output += " : " + line
  line_count += 1 if line.strip.tr(';', '').length > 0
end

if interpreter.pos_section != ""
  output += "/POS\n"
  output += interpreter.pos_section
end

output += %(/END\n)

#write functions to disk
output += interpreter.output_functions(options)

if line_count > 0
  if options[:output]
    # write to file
    File.write(options[:output], output)
  else
    print output
  end
end
